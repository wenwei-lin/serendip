-- Create enum for activity status
CREATE TYPE activity_status AS ENUM ('planned', 'in-progress', 'completed');
CREATE TYPE swipe_status AS ENUM ('unswiped', 'liked', 'disliked');

-- Create activities table (for both selected and generated activities)
CREATE TABLE activities (
    id BIGSERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    category TEXT NOT NULL,
    description TEXT NOT NULL,
    image TEXT,
    location TEXT NOT NULL,
    address TEXT NOT NULL,
    coordinates JSONB, -- Store lat/lng as JSON
    distance FLOAT,
    duration TEXT,
    why TEXT,
    status activity_status DEFAULT 'planned',
    swipe_status swipe_status DEFAULT 'unswiped',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    is_generated BOOLEAN DEFAULT false, -- Whether this activity was generated by AI
    energy_level INTEGER, -- Energy level used to generate this activity
    generated_at TIMESTAMP WITH TIME ZONE, -- When the activity was generated
    selected_at TIMESTAMP WITH TIME ZONE, -- When the activity was selected
    completed_at TIMESTAMP WITH TIME ZONE, -- When the activity was completed
    swiped_at TIMESTAMP WITH TIME ZONE -- When the activity was swiped
);

-- Create activity_tasks table to store tasks for each activity
CREATE TABLE activity_tasks (
    id BIGSERIAL PRIMARY KEY,
    activity_id BIGINT REFERENCES activities(id) ON DELETE CASCADE,
    text TEXT NOT NULL,
    completed BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better query performance
CREATE INDEX idx_activities_status ON activities(status);
CREATE INDEX idx_activities_is_generated ON activities(is_generated);
CREATE INDEX idx_activities_swipe_status ON activities(swipe_status);

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers to automatically update updated_at
CREATE TRIGGER update_activities_updated_at
    BEFORE UPDATE ON activities
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_activity_tasks_updated_at
    BEFORE UPDATE ON activity_tasks
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 